---
interface Vehiculo {
  nombre: string;
  base: string;
  estado: 'disponible' | 'mantenimiento' | 'transito';
}

interface Props {
  disponibles: number;
  mantenimiento: number;
  transito: number;
  vehiculos: Vehiculo[];
}

const { disponibles, mantenimiento, transito, vehiculos = [] } = Astro.props;
---

<div class="estado-vehiculos-container">
  <!-- Botones para cambiar el estado -->
  <div id="filtros" class="filtros-botones mb-4">
    <button class="estado-btn active" data-estado="disponible">
      <span class="btn-text">Disponibles</span> <span class="badge">{vehiculos.filter(v => v.estado === 'disponible').length}</span>
    </button>
    <button class="estado-btn" data-estado="mantenimiento">
      <span class="btn-text">Mantenimiento</span> <span class="badge">{vehiculos.filter(v => v.estado === 'mantenimiento').length}</span>
    </button>
    <button class="estado-btn" data-estado="transito">
      <span class="btn-text">Tránsito</span> <span class="badge">{vehiculos.filter(v => v.estado === 'transito').length}</span>
    </button>
  </div>

  <!-- Lista de vehículos -->
  <div class="lista-container">
    <ul id="listaVehiculos" class="lista-vehiculos">
      {vehiculos.filter(v => v.estado === 'disponible').map(vehiculo => (
        <li class="vehiculo-item">
          <div class="vehiculo-info">
            <strong>{vehiculo.nombre}</strong>
            <span>{vehiculo.base}</span>
          </div>
          <div class={`vehiculo-status ${vehiculo.estado}`}></div>
        </li>
      ))}
    </ul>
  </div>
</div>
<!-- Exportación de datos JSON -->
<script define:vars={{ vehiculosData: vehiculos }}>
  // Ensure data is available to client-side script safely
  window.vehiculosData = vehiculosData;
</script>

<!-- Script funcional -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    try {
      // Use the data made available through define:vars instead of parsing JSON
      const vehiculos = window.vehiculosData || [];
      
      const lista = document.getElementById("listaVehiculos");
      const botones = document.querySelectorAll("#filtros button");

      function render(estado) {
        botones.forEach(btn => {
          btn.classList.toggle('active', btn.dataset.estado === estado);
        });

        const seleccionados = vehiculos.filter(v => v.estado === estado);

        lista.innerHTML = seleccionados.map(v => `
          <li class="vehiculo-item">
            <div class="vehiculo-info">
              <strong>${v.nombre}</strong>
              <span>${v.base}</span>
            </div>
            <div class="vehiculo-status ${estado}"></div>
          </li>
        `).join("");
      }

      // Inicializa con "disponible"
      render("disponible");

      botones.forEach(btn => {
        btn.addEventListener("click", () => render(btn.dataset.estado));
      });

    } catch (error) {
      console.error("Error al procesar los datos de vehículos:", error);
    }
  });
</script>

<style>
  .estado-vehiculos-container {
    background: white;
    border-radius: 10px;
    padding: 1.5rem;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    overflow: hidden; /* Evita desbordamiento */
  }

  .filtros-botones {
    display: flex;
    gap: 0.5rem;
    border-bottom: 1px solid #eee;
    padding-bottom: 1rem;
    flex-wrap: wrap; /* Permite que los botones se ajusten en pantallas pequeñas */
  }

  .estado-btn {
    flex: 1;
    min-width: 120px; /* Ancho mínimo para evitar textos comprimidos */
    padding: 0.75rem 0.5rem;
    border: none;
    background: #f5f5f5;
    border-radius: 6px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    transition: all 0.2s ease;
    white-space: nowrap; /* Evita saltos de línea dentro del botón */
  }

  /* Para pantallas muy pequeñas, apila los botones */
  @media (max-width: 480px) {
    .estado-btn {
      flex: 100%;
      margin-bottom: 0.5rem;
    }
  }

  .estado-btn.active {
    background: #1f3b5d;
    color: white;
  }

  .btn-text {
    display: inline-block;
    overflow: hidden;
    text-overflow: ellipsis; /* Agrega puntos suspensivos si el texto es muy largo */
  }

  .estado-btn .badge {
    background: rgba(255,255,255,0.2);
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.8rem;
    min-width: 28px; /* Ancho mínimo para el badge */
    text-align: center;
  }

  .estado-btn.active .badge {
    background: rgba(255,255,255,0.3);
  }

  .lista-container {
    max-height: 300px; /* Altura máxima para la lista */
    overflow-y: auto; /* Scroll vertical cuando sea necesario */
  }

  .lista-vehiculos {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-top: 1rem;
    width: 100%; /* Asegura que la lista use todo el ancho disponible */
  }

  .vehiculo-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 1rem;
    background: #f9f9f9;
    border-radius: 6px;
    width: 100%; /* Asegura que cada ítem use todo el ancho */
  }

  .vehiculo-info {
    display: flex;
    flex-direction: column;
    overflow: hidden; /* Evita desbordamiento */
    width: calc(100% - 20px); /* Deja espacio para el indicador de estado */
  }

  .vehiculo-info strong {
    font-size: 0.95rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis; /* Agrega puntos suspensivos si el texto es muy largo */
  }

  .vehiculo-info span {
    font-size: 0.85rem;
    color: #666;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis; /* Agrega puntos suspensivos si el texto es muy largo */
  }

  .vehiculo-status {
    min-width: 12px;
    min-height: 12px;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    flex-shrink: 0; /* Evita que el círculo se reduzca */
  }

  .vehiculo-status.disponible{
    background: #4CAF50;
  }

  .vehiculo-status.mantenimiento {
    background: #FFC107;
  }

  .vehiculo-status.transito {
    background: #2196F3;
  }
</style>