---
const { path } = Astro.props;
const adminlteJsUrl = path + "/js/adminlte.js";
---

<!--begin::Third Party Plugin(OverlayScrollbars)-->
<script src="https://cdn.jsdelivr.net/npm/overlayscrollbars@2.10.1/browser/overlayscrollbars.browser.es6.min.js" integrity="sha256-dghWARbRe2eLlIJ56wNB+b760ywulqK3DzZYEpsg2fQ=" crossorigin="anonymous"></script>
<!--end::Third Party Plugin(OverlayScrollbars)--><!--begin::Required Plugin(popperjs for Bootstrap 5)-->
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>
<!--end::Required Plugin(popperjs for Bootstrap 5)--><!--begin::Required Plugin(Bootstrap 5)-->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js" integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy" crossorigin="anonymous"></script>
<!--end::Required Plugin(Bootstrap 5)--><!--begin::Required Plugin(AdminLTE)-->
<script src={adminlteJsUrl} is:inline></script>
<!--end::Required Plugin(AdminLTE)-->
<!--begin::OverlayScrollbars Configure-->
<script is:inline>
  const SELECTOR_SIDEBAR_WRAPPER = ".sidebar-wrapper";
  const Default = {
    scrollbarTheme: "os-theme-light",
    scrollbarAutoHide: "leave",
    scrollbarClickScroll: true,
  };
  document.addEventListener("DOMContentLoaded", function () {
    const sidebarWrapper = document.querySelector(SELECTOR_SIDEBAR_WRAPPER);
    if (
      sidebarWrapper &&
      typeof OverlayScrollbarsGlobal?.OverlayScrollbars !== "undefined"
    ) {
      OverlayScrollbarsGlobal.OverlayScrollbars(sidebarWrapper, {
        scrollbars: {
          theme: Default.scrollbarTheme,
          autoHide: Default.scrollbarAutoHide,
          clickScroll: Default.scrollbarClickScroll,
        },
      });
    }
  });
</script>



<script>

// Espera a que el DOM esté cargado
document.addEventListener("DOMContentLoaded", () => {
  const estadoRadios = document.querySelectorAll<HTMLInputElement>('input[name="estado"]');
  const actividadCell = document.getElementById("actividad-cell")!;
  
  const actividadSelect = document.getElementById("actividad-select");
  const btnAgregarActividad = document.getElementById("btn-agregar-actividad");
  const btnGuardarActividad = document.getElementById("btn-guardar-actividad");
  const nuevaActividadContainer = document.getElementById("nueva-actividad-container");
  const nuevaActividadInput = document.getElementById("nueva-actividad-input");
  const actividadesAgregadas = document.getElementById("actividades-agregadas");
  const mensajeActividadesVacio = document.getElementById("mensaje-actividades-vacio");

  // Array to store activities
  let actividades = [];

  // Show/hide new activity input when "Otra actividad..." is selected
  if (actividadSelect) {
    actividadSelect.addEventListener("change", function() {
      if (nuevaActividadContainer) {
        nuevaActividadContainer.style.display = 
          this.value === "Otra actividad..." ? "block" : "none";
      }
    });
  }

  // Add activity from select
  if (btnAgregarActividad) {
    btnAgregarActividad.addEventListener("click", function() {
      if (!actividadSelect || !actividadesAgregadas || !mensajeActividadesVacio) return;
      
      const selectedValue = actividadSelect.value;
      if (selectedValue && selectedValue !== "Seleccionar actividad" && selectedValue !== "Otra actividad...") {
        agregarActividad(selectedValue);
      }
    });
  }

  // Save new custom activity
  if (btnGuardarActividad && nuevaActividadInput) {
    btnGuardarActividad.addEventListener("click", function() {
      const nuevaActividad = nuevaActividadInput.value.trim();
      if (nuevaActividad) {
        agregarActividad(nuevaActividad);
        // Reset the input and hide the container
        nuevaActividadInput.value = "";
        if (nuevaActividadContainer) {
          nuevaActividadContainer.style.display = "none";
        }
        // Reset the select
        if (actividadSelect) {
          actividadSelect.value = "Seleccionar actividad";
        }
      }
    });
  }

  // Function to add activity to the list
  function agregarActividad(actividad) {
    if (!actividadesAgregadas || !mensajeActividadesVacio) return;
    
    actividades.push(actividad);
    
    // Hide empty message
    mensajeActividadesVacio.style.display = "none";
    
    // Create activity item
    const actividadItem = document.createElement("div");
    actividadItem.className = "d-flex justify-content-between align-items-center mb-2";
    
    const actividadText = document.createElement("span");
    actividadText.textContent = actividad;
    
    const deleteBtn = document.createElement("button");
    deleteBtn.className = "btn btn-sm btn-danger";
    deleteBtn.innerHTML = '<i class="bi bi-trash"></i>';
    deleteBtn.addEventListener("click", function() {
      actividades = actividades.filter(a => a !== actividad);
      actividadItem.remove();
      
      // Show empty message if no activities left
      if (actividades.length === 0 && mensajeActividadesVacio) {
        mensajeActividadesVacio.style.display = "block";
      }
    });
    
    actividadItem.appendChild(actividadText);
    actividadItem.appendChild(deleteBtn);
    actividadesAgregadas.appendChild(actividadItem);
  }

  const hrInicial = document.getElementById("modal-hr-inicial") as HTMLInputElement;
  const hrFinal = document.getElementById("modal-hr-final") as HTMLInputElement;
  const hrTotal = document.getElementById("modal-horometro") as HTMLInputElement;
  const valorHr = document.getElementById("modal-valor-hr") as HTMLInputElement;
  const total = document.getElementById("modal-total") as HTMLInputElement;
  const galones = document.getElementById("combustible-galones") as HTMLInputElement;
  const hrCombustible = document.getElementById("combustible-horometro") as HTMLInputElement;
  const rendimiento = document.getElementById("combustible-rendimiento") as HTMLInputElement;

  // Mostrar u ocultar actividades según el estado
  estadoRadios.forEach((radio) => {
    radio.addEventListener("change", () => {
      actividadCell.style.display = (radio.id === "operacion" && radio.checked) ? "block" : "none";
    });
  });

  // Función para calcular horómetro total
  function calcularHorometroYTotal() {
    const inicial = parseFloat(hrInicial.value);
    const final = parseFloat(hrFinal.value);
    const valor = parseFloat(valorHr.value);

    if (!isNaN(inicial) && !isNaN(final) && final >= inicial) {
      const totalHoras = final - inicial;
      hrTotal.value = totalHoras.toFixed(2);

      if (!isNaN(valor)) {
        total.value = (totalHoras * valor).toFixed(2);
      }
    } else {
      hrTotal.value = "";
      total.value = "";
    }
  }

  // Función para calcular rendimiento
  function calcularRendimiento() {
    const gal = parseFloat(galones.value);
    const horas = parseFloat(hrCombustible.value);

    if (!isNaN(gal) && !isNaN(horas) && horas > 0) {
      rendimiento.value = (gal / horas).toFixed(2);
    } else {
      rendimiento.value = "";
    }
  }

  // Eventos para cálculo de horómetro y total
  hrInicial.addEventListener("input", calcularHorometroYTotal);
  hrFinal.addEventListener("input", calcularHorometroYTotal);
  valorHr.addEventListener("input", calcularHorometroYTotal);

  // Eventos para cálculo de rendimiento
  galones.addEventListener("input", calcularRendimiento);
  hrCombustible.addEventListener("input", calcularRendimiento);
});


const equipoModal = document.getElementById("equipoModal");

equipoModal?.addEventListener("show.bs.modal", (event) => {
  const button = event.relatedTarget as HTMLElement;

  const tipo = button.getAttribute("data-tipo") || "";
  const placa = button.getAttribute("data-placa") || "";
  const estado = button.getAttribute("data-estado") || "";
  const fecha = button.getAttribute("data-fecha") || "";
  const obra = button.getAttribute("data-obra") || "";
  const actividad = button.getAttribute("data-actividad") || "";
  const operador= button.getAttribute("data-operador") || "";

  // Colocar los valores en los campos del modal
  (document.getElementById("modal-tipo") as HTMLInputElement).value = tipo;
  (document.getElementById("modal-placa") as HTMLInputElement).value = placa;
  (document.getElementById("modal-fecha") as HTMLInputElement).value = fecha;
  (document.getElementById("modal-obra") as HTMLInputElement).value = obra;
  (document.getElementById("modal-actividad") as HTMLInputElement).value = actividad;
  (document.getElementById("modal-operador") as HTMLInputElement).value = operador;

  // Estado (radio button)
  const radio = document.querySelector(`input[name="estado"][value="${estado}"]`) as HTMLInputElement;
  if (radio) {
    radio.checked = true;
    radio.dispatchEvent(new Event("change")); // Para mostrar u ocultar "actividad"
  }
});


</script>


<script>
  // Mostrar/ocultar campo para nuevo tipo
  document.addEventListener("DOMContentLoaded", function () {
    const tipoSelect = document.getElementById("tipo");
    const nuevoTipoContainer = document.getElementById("nuevoTipoContainer");

    tipoSelect.addEventListener("change", function () {
      if (this.value === "otro") {
        nuevoTipoContainer.style.display = "block";
        document.getElementById("nuevoTipo").setAttribute("required", "required");
      } else {
        nuevoTipoContainer.style.display = "none";
        document.getElementById("nuevoTipo").removeAttribute("required");
      }
    });
  });
</script>

<!--end::OverlayScrollbars Configure-->
