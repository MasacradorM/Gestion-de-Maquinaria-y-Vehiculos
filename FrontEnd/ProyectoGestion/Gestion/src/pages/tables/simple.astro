---

import '@/styles/main.scss';  
import Head from "@components/_head.astro";
import Footer from "@components/dashboard/_footer.astro";
import Topbar from "@components/dashboard/_topbar.astro";
import Sidenav from "@components/dashboard/_sidenav.astro";
import Scripts from "@components/_scripts.astro";
import HistorialRegistro from "../../components/maquinaInterfaz/historialRegistro.astro";
// Importa el script de gestión de maquinaria
import { initGestionMaquinaria } from '@/scripts/maquinaria/newMaquina';
const title = "Maquinaria Amarilla | Dashboard";
const path = "../../../dist";
const mainPage = "maquinaria";
const page = "listado";


// Función para obtener la clase CSS del estado
const getEstadoClass = (estado: string) => {
  // Primero normalizamos el estado (minúsculas, sin espacios extras)
  const estadoNormalizado = estado.trim().toLowerCase();
  

  return estados[estadoNormalizado] || estados['default'];
};

---

<!DOCTYPE html>
<html lang="es">
  <!--begin::Head-->
  <head>
     <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/apexcharts@3.37.1/dist/apexcharts.css"
      integrity="sha256-4MX+61mt9NVvvuPjUWdUdyfZfxSB1/Rf9WtqRHgG5S0="
      crossorigin="anonymous"
    />

    <!-- Bootstrap CSS (esto probablemente ya lo tienes) -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">

<!-- Bootstrap Bundle JS (incluye Popper) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <Head title={title} path={path} />
 
  </head>
  <!--end::Head-->
  <!--begin::Body-->
  <body class="layout-fixed sidebar-expand-lg bg-body-tertiary">

<!-- Modal Editar Maquina -->
<div class="modal fade" id="equipoModal" tabindex="-1" aria-labelledby="equipoModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="equipoModalLabel">Detalles del Equipo</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
        <div class="modal-body pb-5">

        <!-- Primera sección: Datos del equipo (siempre visible) -->
        <div class="row mb-3">
            <div class="row mb-4 px-3"> <!-- Añadido px-3 para padding horizontal -->

            <label for="modal-tipo" class="form-label">Tipo</label>
            <input type="text" class="form-control" id="modal-tipo" readonly>
          </div>
          <div class="col-md-4">
            <label for="modal-placa" class="form-label">Placa</label>
            <input type="text" class="form-control" id="modal-placa" readonly>
          </div>
        </div>
        <!-- Segunda sección: Estado del equipo (siempre visible) -->
        <div class="row mb-3">
          <div class="col-12">
            <label class="form-label">Estado del Equipo</label>
            <div class="estado-selector">
              <label class="estado-option">
                <input type="radio" name="estado" id="mantenimiento" value="EN MANTENIMIENTO">
                <span>EN MANTENIMIENTO</span>
              </label>
              <label class="estado-option">
                <input type="radio" name="estado" id="disponible" value="DISPONIBLE">
                <span>DISPONIBLE</span>
              </label>
              <label class="estado-option">
                <input type="radio" name="estado" id="operacion" value="EN OPERACION">
                <span>EN OPERACIÓN</span>
              </label>
              <label class="estado-option">
                <input type="radio" name="estado" id="standby" value="STAND BY">
                <span>STAND BY</span>
              </label>
            </div>
          </div>
        </div> 
        <hr>
          <div class="row mb-3">
            <div id="fecha-container" class="col-md-6" style="display: none;">
            <label for="modal-fecha" class="form-label">Fecha</label>
              <input type="date" class="form-control" id="modal-fecha">
            </div>
            <div id="obra-container" class="col-md-6" style="display: none;">
              <label for="modal-obra" class="form-label">Obra</label>
              <input type="text" class="form-control" id="modal-obra">
            </div>
          </div>
<div class="row mb-3">
  <!-- Contenedor independiente para operador -->
  <div id="operador-container" class="col-md-6" style="display: none;">
    <label for="modal-operador" class="form-label">Operador</label>
    <input type="text" class="form-control" id="modal-operador">
  </div>
  <!-- Contenedor independiente para reporte -->
  <div id="reporte-container" class="col-md-6" style="display: none;">
    <label for="modal-reporte" class="form-label">Reporte</label>
    <input type="text" class="form-control" id="modal-reporte">
  </div>
</div>
</div>
        <!-- Sección de horómetros (solo visible en EN OPERACIÓN) -->
        <div id="horas-section" class="mb-3 px-3">
          <h4>Horómetros</h4>
          <div class="row">
            <div class="col-md-4">
              <label for="modal-hr-inicial" class="form-label">Horómetro Inicial</label>
              <input type="number" class="form-control" id="modal-hr-inicial">
            </div>
            <div class="col-md-4">
              <label for="modal-hr-final" class="form-label">Horómetro Final</label>
              <input type="number" class="form-control" id="modal-hr-final">
            </div>
            <div class="col-md-4">
              <label for="modal-horometro" class="form-label">Horómetro Total</label>
              <input type="number" class="form-control" id="modal-horometro" readonly>
            </div>
          </div>
        </div>
        <!-- Sección de costos (solo visible en EN OPERACIÓN) -->
        <div id="costos-section" class="mb-3 px-3">
          <h4>Costos</h4>
          <div class="row">
            <div class="col-md-6">
              <label for="modal-valor-hr" class="form-label">Valor por hora</label>
              <input type="number" class="form-control" id="modal-valor-hr">
            </div>
            <div class="col-md-6">
              <label for="modal-total" class="form-label">Total</label>
              <input type="number" class="form-control" id="modal-total" readonly>
            </div>
          </div>
        </div>
        <!-- Sección de actividades (visible en EN OPERACIÓN y MANTENIMIENTO) -->
        <div id="actividad-cell" class="mb-4 px-3">
          <h4>Actividades</h4>
          <div class="d-flex gap-2 mb-2">
            <select id="actividad-select" class="form-select">
              <option value="" disabled selected>Seleccionar actividad</option>
              <option value="Transporte de Vibro">Transporte de Vibro</option>
              <option value="Excavación">Excavación</option>
              <option value="Carga de Materiales">Carga de Materiales</option>
              <option value="Nivelación de Terreno">Nivelación de Terreno</option>
              <option value="Otra actividad...">Otra actividad...</option>
            </select>
            
            <input type="number" id="cantidad-actividad" class="form-control" placeholder="cantidad" min="1">
            <button id="btn-agregar-actividad" type="button" class="btn btn-primary">
              Agregar
            </button>
          </div>
          <div id="nueva-actividad-container" class="mt-3 p-3 border rounded" style="display: none;">
            <label class="form-label" for="nueva-actividad-input">Nueva Actividad</label>
            <div class="d-flex gap-2">
              <input id="nueva-actividad-input" type="text" class="form-control" placeholder="Ingrese nueva actividad">
              <button id="btn-guardar-actividad" type="button" class="btn btn-success">
                Guardar
              </button>
            </div>
          </div>
          <div class="mt-3">
            <h5>Actividades agregadas:</h5>
            <div id="actividades-agregadas" class="mt-2">
              <p id="mensaje-actividades-vacio" class="text-muted fst-italic">No hay actividades agregadas.</p>
            </div>
          </div>
        </div>
<!-- Fuera del estado-selector, añade esto -->
<div id="programarMantenimiento-section" class="mt-3" style="display: none;">
  <div class="form-check">
    <input class="form-check-input" type="checkbox" id="programar-mantenimiento-check">
    <label class="form-check-label" for="programar-mantenimiento-check">
      Programar próximo mantenimiento
    </label>
  </div>
  
  <div id="mantenimiento-form" style="display: none;" class="mt-3 p-3 border bg-light">
    <label>Fecha próximo mantenimiento:</label>
    <input type="date" id="fecha-proximo-mantenimiento" class="form-control mb-2">
    <label>Mensaje:</label>
    <textarea id="mensaje-alerta" class="form-control mb-2"></textarea>
  </div>
</div>
  <!--Sección de GPS (solo visible en EN OPERACIÓN) -->
        <div class="row mb-3 px-3">
              <div  id ="gps-container" class="col-md-6" style="display: none;">  
              <label for="modal-gps" class="form-label">GPS</label>
              <input type="text" id="modal-gps" class="form-control">
            </div>
        </div>
        <!-- Sección de combustible (solo visible en EN OPERACIÓN) -->
        <div id="combustible-section" class="mb-4 px-3">
          <h4>Combustible</h4>
          <div class="row">
            <div class="col-md-4">
              <label for="combustible-galones" class="form-label">Galones</label>
              <input type="number" id="combustible-galones" class="form-control" step="0.01">
            </div>
            <div class="col-md-4">
              <label for="combustible-horometro" class="form-label">Horómetro</label>
              <input type="number" id="combustible-horometro" class="form-control">
            </div>
            <div class="col-md-4">
              <label for="combustible-rendimiento" class="form-label">Rendimiento (gal/hr)</label>
              <input type="text" id="combustible-rendimiento" class="form-control" readonly>
            </div>
          </div>
        </div>

        <!-- Sección de observaciones -->
<div id="observaciones-section" class="mb-1 px-3">
  <h4 class="mb-2">Observaciones</h4>
  <textarea id="modal-observaciones" class="form-control" rows="3" style="min-height: 100px;"></textarea>
</div>

<!-- Sección de botones -->
<div class="container-fluid mt-4 pt-2 border-top px-3 mx-0 mb-3">
  <div class="row gx-2 align-items-center">
    <div class="col-auto">
      <button type="button" class="btn btn-danger btn-sm">
        <i class="bi bi-trash"></i> Eliminar
      </button>
    </div>
    <div class="col"></div>
    <div class="col-auto d-flex gap-2">
      <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">
        <i class="bi bi-x-circle"></i> Cancelar
      </button>
      <button type="button" class="btn btn-primary btn-sm">
        <i class="bi bi-save"></i> Guardar
      </button>
    </div>
  </div>
</div>

</div> <!-- cierre de modal-body -->

</div> <!-- Cierre del modal-content -->

  </div> <!-- Cierre del modal-dialog -->
</div> <!-- Cierre del modal fade -->
   <!--begin::App Wrapper-->
    <div class="app-wrapper">
      <Topbar path={path} />
      <Sidenav path={path} mainPage={mainPage} page={page} />
      <!--begin::App Main-->
      <main class="app-main">
        <!--begin::App Content Header-->
        <div class="app-content-header">
          <!--begin::Container-->
          <div class="container-fluid">
            <!--begin::Row-->
            <div class="row">
              <div class="col-sm-6">
                <h3 class="mb-0" style="font-size: 1.5rem; font-weight: bold; color: rgba(26, 54, 93, 1) !important;">Maquinaria Amarilla</h3>

              </div>
              <div class="col-sm-6">
                <ol class="breadcrumb float-sm-end">
                  <li class="breadcrumb-item"><a href="#">Home</a></li>
                  <li class="breadcrumb-item active" aria-current="page">
                    Maquinaria Amarilla
                  </li>
                </ol>
              </div>
            </div>
            <!--end::Row-->
          </div>
          <!--end::Container-->
        </div>
        <!--end::App Content Header-->
        <!--begin::App Content-->
        <div class="app-content">
          <!--begin::Container-->
          <div class="container-fluid">
         <div class="filtros">
  <div class="search-box">
    <div class="input-group">
      <input type="search" class="form-control" placeholder="Buscar..." aria-label="Buscar">
      <span class="input-group-text">
        <img src="https://abs-0.twimg.com/emoji/v2/svg/1f50d.svg" alt="buscar" style="width:1em; height:1em;">
      </span>
    </div>
  </div>

  <!-- Contenedor de filtros responsive -->
  <div class="filtros-dropdown d-flex flex-md-row flex-column flex-wrap gap-2 align-items-start align-items-md-center">
    <!-- Filtro Estado -->
    <div class="dropdown">
      <button class="btn btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown">
        Estado : Todos
      </button>
    </div>
    
    <!-- Filtro Operador -->
    <div class="dropdown">
      <button class="btn btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown">
        Operador: Todos
      </button>
    </div>

    <!-- Botón Reporte Diario (ahora en btn-light) -->
    <button class="btn btn-light mt-2 mt-md-0" data-bs-toggle="modal" data-bs-target="#modalNuevaMaquina">
       <strong>+ Nueva Maquina</strong>
    </button>
  </div>
</div>            


<!-- Modal -->
<div class="modal fade" id="modalNuevaMaquina" tabindex="-1" aria-labelledby="modalNuevaMaquinaLabel">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalNuevaMaquinaLabel">Registrar Nueva Máquina</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
      </div>
      <form id="formNuevaMaquina">
        <div class="modal-body">
          <!-- Tipo de máquina -->
<div class="mb-3">
  <label for="tipo" class="form-label">Tipo de máquina</label>
  <select class="form-select" id="tipo" name="tipo" required>
    <option value="">Seleccione...</option>
    <option value="autohormigonera">Autohormigonera</option>
    <option value="motoniveladora">Motoniveladora</option>
    <option value="excavadora">Excavadora</option>
    <option value="retrocargador">Retrocargador</option>
    <option value="mini_excavadora">Mini excavadora</option>
    <option value="minicargador">Minicargador</option>
    <option value="vibrocompactador">Vibrocompactador</option>
    <option value="otro">Otro...</option>
  </select>
</div>
<!-- Campo adicional para nuevo tipo -->
<div class="mb-3" id="nuevoTipoContainer" style="display: none;">
  <label for="nuevoTipo" class="form-label">Nuevo tipo de máquina</label>
  <input type="text" class="form-control" id="nuevoTipo" name="nuevoTipo" placeholder="Escriba el nuevo tipo">
</div>
          <div class="mb-3">
            <label for="placa" class="form-label">Placa</label>
            <input type="text" class="form-control" id="placa" name="placa" placeholder="Ej: SDN095" required>
          </div>

  <div class="mb-3">
  <label for="operador" class="form-label">Asignar a (Operador)</label>
  <select class="form-select" id="operador" name="operador">
    <option value="">-- Sin asignar --</option>
    <option value="Cristian Aldana">Cristian Aldana</option>
    <option value="Aldair Diaz">Aldair Diaz</option>
  </select>
</div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
          <button type="submit" class="btn btn-primary">Guardar Máquina</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- 1. AGREGA ESTE HTML ANTES DEL CIERRE </body> EN TU PÁGINA -->
<div id="historialOverlay" style="display: none;">
  <button onclick="cerrarHistorial()" class="btn btn-danger" style="position: absolute; top: 1rem; right: 1rem; z-index: 40; box-shadow: 0 2px 10px rgba(0,0,0,0.2);">
    Cerrar
  </button>
  
  <h2 style="padding: 2rem 2rem 1rem 2rem; margin: 0; color: #0d2b55; font-weight: 600;">
    Historial de Registros
  </h2>
  
  <div class="table-container">
    <table id="tablaHistorial">
  <thead>
        <tr>
          <th class="sticky-first-col sticky-header">Fecha</th>
          <th class="sticky-second-col sticky-header">Placa</th>
          <th>Obra</th>
          <th style="min-width: 200px;">Actividad</th>
          <th>Hora Inicial</th>
          <th>Hora Final</th>
          <th>Total Horas</th>
          <th>Valor Hora</th>
          <th>Galones</th>
          <th>Valor Galones</th>
          <th>Horometro Tanqueo</th>
          <th>GPS</th>
          <th>Observaciones</th>
          <th>Reporte</th>
           <th>Operador</th>
        </tr>
      </thead>
  <tbody>
    <!-- Las filas generadas dinámicamente deben tener: -->
    <tr>
      <td class="sticky-first-col">...</td>
      <td class="sticky-second-col">...</td>
      <!-- resto de celdas normales -->
    </tr>
  </tbody>
</table>
  </div>
</div>

<!--begin::Row-->
            <div class="row" 
id="maquinas-container">

              <!-- Asegúrate que existe este contenedor -->
  <!-- Las tarjetas aparecerán aquí -->


            </div>
            <!--end::Row-->
            
             <!-- Paginación -->
              <nav aria-label="Paginación de maquinaria">
  <ul class="pagination justify-content-center">
    <li class="page-item">
      <a class="page-link" href="#" aria-label="Anterior">
        <span aria-hidden="true">&laquo;</span>
      </a>
    </li>
    <!-- Los números de página se generarán aquí dinámicamente -->
    <li class="page-item">
      <a class="page-link" href="#" aria-label="Siguiente">
        <span aria-hidden="true">&raquo;</span>
      </a>
    </li>
  </ul>
</nav>
       



          </div>
          <!--end::Container-->
        </div>
        <!--end::App Content-->
      </main>
      <!--end::App Main-->
      <Footer />
    </div>

    <!--end::App Wrapper-->
    <!--begin::Script-->
    <script>

var guardarActivos = false;  // cambia a true si quieres activar el guardado
var tarjetasPorPagina = 6;
var paginaActual = 1;

// Funciones principales
function getEstadoClass(estado) {
  var estadoLower = estado.toLowerCase();
  switch (estadoLower) {
    case 'disponible': return 'disponible';
    case 'mantenimiento': return 'mantenimiento';
    case 'operacion':
    case 'operación': return 'operacion';
    case 'transito':
    case 'tránsito': return 'transito';
    case 'standby': return 'standby';
    default: return 'disponible';
  }
}

function limpiarEstilosModal() {
  document.body.classList.remove('modal-open');
  document.body.style.overflow = '';
  document.body.style.paddingRight = '';
  document.body.style.position = '';
  document.body.style.height = '';
  
  document.documentElement.style.overflow = '';
  document.documentElement.classList.remove('modal-open');
  
  var backdrops = document.querySelectorAll('.modal-backdrop');
  for (var i = 0; i < backdrops.length; i++) {
    if (backdrops[i].parentNode) {
      backdrops[i].parentNode.removeChild(backdrops[i]);
    }
  }
  
  console.log('Estilos de modal limpiados');
}

function cerrarModalSeguro(modalId) {
  modalId = modalId || 'modalNuevaMaquina';
  var modal = document.getElementById(modalId);
  if (!modal) {
    console.error("Modal no encontrado");
    return;
  }

  try {
    if (typeof bootstrap !== 'undefined' && bootstrap.Modal) {
      var bsModal = bootstrap.Modal.getInstance(modal) || new bootstrap.Modal(modal);
      bsModal.hide();
      
      var handler = function() {
        limpiarEstilosModal();
        modal.removeEventListener('hidden.bs.modal', handler);
      };
      modal.addEventListener('hidden.bs.modal', handler, { once: true });
    } else {
      modal.style.display = 'none';
      modal.classList.remove('show');
      modal.setAttribute('aria-hidden', 'true');
      modal.removeAttribute('aria-modal');
      limpiarEstilosModal();
    }
  } catch (error) {
    console.error('Error al cerrar modal:', error);
    limpiarEstilosModal();
  }

  setTimeout(limpiarEstilosModal, 100);
}

function guardarMaquina(maquina) {
    if (!guardarActivos) {
    console.log('Guardado desactivado: no se guarda máquina');
    return;
  }

  try {
    var maquinas = JSON.parse(localStorage.getItem('maquinas_activas') || '[]');
    maquinas.push(maquina);
    localStorage.setItem('maquinas_activas', JSON.stringify(maquinas));
    console.log('Máquina guardada en localStorage');
  } catch (error) {
    console.error('Error al guardar máquina:', error);
  }
}

function generarPaginacion(totalPaginas) {
  var contenedorPaginacion = document.querySelector('.pagination');
  if (!contenedorPaginacion) return;
  
  contenedorPaginacion.innerHTML = `
    <li class="page-item">
      <a class="page-link" href="#" aria-label="Anterior">
        <span aria-hidden="true">&laquo;</span>
      </a>
    </li>
    <li class="page-item">
      <a class="page-link" href="#" aria-label="Siguiente">
        <span aria-hidden="true">&raquo;</span>
      </a>
    </li>
  `;
  
  var botonAnterior = contenedorPaginacion.querySelector('li:first-child');
  var botonSiguiente = contenedorPaginacion.querySelector('li:last-child');
  
  for (var numeroDePagina = 1; numeroDePagina <= totalPaginas; numeroDePagina++) {
    var elementoPagina = document.createElement('li');
    elementoPagina.className = 'page-item ' + (numeroDePagina === paginaActual ? 'active' : '');
    
    var enlacePagina = document.createElement('a');
    enlacePagina.className = 'page-link';
    enlacePagina.href = '#';
    enlacePagina.textContent = numeroDePagina.toString();
    
    enlacePagina.addEventListener('click', function(evento) {
      evento.preventDefault();
      paginaActual = numeroDePagina;
      actualizarVista();
    });
    
    elementoPagina.appendChild(enlacePagina);
    contenedorPaginacion.insertBefore(elementoPagina, botonSiguiente);
  }
  
  botonAnterior.classList.toggle('disabled', paginaActual === 1);
  botonSiguiente.classList.toggle('disabled', paginaActual === totalPaginas);
  
  botonAnterior.querySelector('a').onclick = function(evento) {
    evento.preventDefault();
    if (paginaActual > 1) {
      paginaActual--;
      actualizarVista();
    }
  };
  
  botonSiguiente.querySelector('a').onclick = function(evento) {
    evento.preventDefault();
    if (paginaActual < totalPaginas) {
      paginaActual++;
      actualizarVista();
    }
  };
}

function actualizarVista() {
  var inicio = (paginaActual - 1) * tarjetasPorPagina;
  var fin = paginaActual * tarjetasPorPagina;

  var tarjetas = document.querySelectorAll('.maquina-card');
  for (var i = 0; i < tarjetas.length; i++) {
    tarjetas[i].style.display = (i >= inicio && i < fin) ? 'block' : 'none';
  }

  var totalPaginas = Math.ceil(tarjetas.length / tarjetasPorPagina);
  generarPaginacion(totalPaginas); 
}

function crearTarjetaMaquina(maquina) {
  try {
    var container = document.getElementById('maquinas-container');
    if (!container) {
      console.error("Error: Contenedor #maquinas-container no encontrado");
      return false;
    }

    var fragment = document.createDocumentFragment();
    var colDiv = document.createElement('div');
    colDiv.className = 'col-md-4';
    
    var cardDiv = document.createElement('div');
    cardDiv.className = 'maquina-card';
    cardDiv.setAttribute('data-id', maquina.id.toString());
    
    // Header
    var header = document.createElement('div');
    header.className = 'maquina-header';
    header.style.cssText = 'display: flex; flex-direction: column; align-items: flex-start; gap: 0.5rem; cursor: pointer;';
    
    var titulo = document.createElement('h5');
    titulo.className = 'maquina-titulo';
    titulo.style.cssText = 'margin: 0; text-align: left; width: 100%;';
    titulo.textContent = maquina.tipo;
    
    var placaContainer = document.createElement('div');
    placaContainer.style.cssText = 'display: flex; align-items: center; gap: 1rem;';
    
    var placaText = document.createElement('small');
    placaText.style.cssText = 'font-size: 1.5rem; font-weight:bold; color: #ffff;';
    placaText.textContent = maquina.placa;
    
    var estadoBadge = document.createElement('span');
    estadoBadge.className = 'estado-badge ' + getEstadoClass(maquina.estado);
    estadoBadge.textContent = maquina.estado;
    
    // Content
    var contentDiv = document.createElement('div');
    contentDiv.className = 'maquina-content';
    
    var crearInfoRow = function(label, value) {
      var row = document.createElement('div');
      row.className = 'maquina-info';
      
      var labelSpan = document.createElement('span');
      labelSpan.className = 'maquina-label';
      labelSpan.textContent = label + ':';
      
      var valueSpan = document.createElement('span');
      valueSpan.className = 'maquina-value';
      valueSpan.textContent = value;
      
      row.append(labelSpan, valueSpan);
      return row;
    };
    
    // Botonera
    var botonera = document.createElement('div');
    botonera.className = 'botonera';
    
    var crearBoton = function(texto, mode, clase) {
      var btn = document.createElement('button');
      btn.className = clase;
      btn.setAttribute('data-bs-toggle', 'modal');
      btn.setAttribute('data-bs-target', '#equipoModal');
      btn.setAttribute('data-mode', mode);
      
      for (var key in maquina) {
        if (maquina.hasOwnProperty(key)) {
          btn.setAttribute('data-' + key, maquina[key] ? maquina[key].toString() : '');
        }
      }
      
      btn.textContent = texto;
      return btn;
    };
    
    placaContainer.append(placaText, estadoBadge);
    header.append(titulo, placaContainer);
    
    contentDiv.append(
      crearInfoRow('Fecha', maquina.fecha),
      crearInfoRow('Obra', maquina.obra),
      crearInfoRow('Actividad', maquina.actividad),
      crearInfoRow('Operador', maquina.operador)
    );
    
    botonera.append(
      crearBoton('+ Nuevo Registro', 'new', 'btn btn-sm btn-outline-secondary'),
      crearBoton('Editar', 'edit', 'btn btn-sm btn-info text-white btn-edit')
    );
    
    contentDiv.appendChild(botonera);
    cardDiv.append(header, contentDiv);
    colDiv.appendChild(cardDiv);
    fragment.appendChild(colDiv);
    
    header.addEventListener('click', function() {
      mostrarHistorial(maquina);
    });
    container.appendChild(fragment);

    var totalTarjetas = document.querySelectorAll('.maquina-card').length;
    if (totalTarjetas % tarjetasPorPagina === 1) {
      paginaActual = Math.ceil(totalTarjetas / tarjetasPorPagina);
    }
    actualizarVista();
    if (guardarActivos) {
  guardarTodasLasTarjetas();
}   
    setTimeout(limpiarEstilosModal, 10);
    return true;
    
  } catch (error) {
    console.error("Error al crear tarjeta:", error);
    alert("Ocurrió un error al guardar");
    return false;
  }
}

function guardarTodasLasTarjetas() {
    if (!guardarActivos) {
    console.log('Guardado desactivado: no se guarda máquina');
    return;
  }

  var tarjetas = document.querySelectorAll('.maquina-card');
  var maquinas = [];
  
  for (var i = 0; i < tarjetas.length; i++) {
    var tarjeta = tarjetas[i];
    var values = tarjeta.querySelectorAll('.maquina-value');
    
    maquinas.push({
      id: parseInt(tarjeta.getAttribute('data-id'))|| 0,
      tipo: (tarjeta.querySelector('.maquina-titulo') || {}).textContent || '',
      placa: (tarjeta.querySelector('.maquina-header small') || {}).textContent || '',
      estado: (tarjeta.querySelector('.estado-badge') || {}).textContent || '',
      fecha: values[0] ? values[0].textContent : '',
      obra: values[1] ? values[1].textContent : '',
      actividad: values[2] ? values[2].textContent : '',
      operador: values[3] ? values[3].textContent : '',
      operadorId: null
    });
  }
  
  localStorage.setItem('maquinas_activas', JSON.stringify(maquinas));
  console.log('Tarjetas guardadas en localStorage:', maquinas.length);
}

function cargarMaquinasExistentes() {
  try {
    var maquinas = JSON.parse(localStorage.getItem('maquinas_activas') || '[]');
    console.log('Cargando máquinas existentes:', maquinas.length);
    
    for (var i = 0; i < maquinas.length; i++) {
      crearTarjetaMaquina(maquinas[i]);
    }
    
    setTimeout(limpiarEstilosModal, 100);
  } catch (error) {
    console.error('Error al cargar máquinas existentes:', error);
  }
}

function actualizarTarjetaDOM(m) {
  var card = document.querySelector('.maquina-card[data-id="' + m.id + '"]');
  if (!card) {
    console.error("Tarjeta no encontrada para ID:", m.id);
    return;
  }

  (card.querySelector('.maquina-titulo') || {}).textContent = m.tipo;
  (card.querySelector('.maquina-header small') || {}).textContent = m.placa;

  var badge = card.querySelector('.estado-badge');
  badge.textContent = m.estado;
  badge.className = 'estado-badge ' + getEstadoClass(m.estado);

  var values = card.querySelectorAll('.maquina-value');
  if (values.length >= 4) {
    values[0].textContent = m.fecha;
    values[1].textContent = m.obra;
    values[2].textContent = m.actividad;
    values[3].textContent = m.operador;
  }
}

function inicializarDatosDePrueba() {
  var datosPrueba = [
    {
      placa: 'MMMM',
      fecha: '23/05/2025',
      obra: 'Construcción Centro Comercial',
      actividad: 'Movimiento de tierras',
      horaInicio: '08:00',
      horaFin: '12:30',
      operador: 'Juan Pérez'
    },
    {
      placa: 'MMMM',
      fecha: '22/05/2025',
      obra: 'Construcción Centro Comercial',
      actividad: 'Nivelación de terreno',
      horaInicio: '13:00',
      horaFin: '17:30',
      operador: 'Juan Pérez'
    },
    {
      placa: 'ABC123',
      fecha: '22/05/2025',
      obra: 'Autopista Norte',
      actividad: 'Excavación',
      horaInicio: '07:30',
      horaFin: '16:00',
      operador: 'Carlos Gómez'
    }
  ];
  
  if (!localStorage.getItem('maquinas')) {
    localStorage.setItem('maquinas', JSON.stringify(datosPrueba));
    console.log('Datos de prueba inicializados para historial');
  }
}

function obtenerRegistrosHistorial(placa) {
  console.group('Depuración: obtenerRegistrosHistorial');
  try {
    console.log('Placa recibida:', placa);
    
    var todosLosRegistros = JSON.parse(localStorage.getItem('maquinas') || '[]');
    console.log('Total registros en localStorage:', todosLosRegistros.length);
    
    var registrosFiltrados = todosLosRegistros.filter(function(registro) {
      var placaRegistro = registro.placa ? registro.placa.trim().toUpperCase() : '';
      var placaBuscada = placa.trim().toUpperCase();
      return placaRegistro === placaBuscada;
    });
    
    console.log('Registros filtrados encontrados: ' + registrosFiltrados.length);
    
    registrosFiltrados.sort(function(a, b) {
      try {
        var convertirFecha = function(fechaStr) {
          if (!fechaStr) return new Date(0);
          var parts = fechaStr.split('/');
          return new Date(parts[2] + '-' + parts[1] + '-' + parts[0]);
        };
        
        var fechaA = convertirFecha(a.fecha);
        var fechaB = convertirFecha(b.fecha);
        return fechaB.getTime() - fechaA.getTime();
      } catch (error) {
        console.error('Error al ordenar fechas:', error);
        return 0;
      }
    });
    
    console.groupEnd();
    return registrosFiltrados;
    
  } catch (error) {
    console.error('Error en obtenerRegistrosHistorial:', error);
    console.groupEnd();
    return [];
  }
}

function mostrarHistorial(maquina) {
  console.log('Mostrando historial para:', maquina);
  
  var overlay = document.getElementById('historialOverlay');
  var tbody = document.querySelector('#tablaHistorial tbody');
  
  if (!overlay || !tbody) {
    console.error('Elementos del historial no encontrados');
    return;
  }
  
  tbody.innerHTML = '';
  var registros = obtenerRegistrosHistorial(maquina.placa);
  
  if (registros.length === 0) {
    var fila = document.createElement('tr');
    fila.innerHTML = `
      <td class="sticky-first-col">${new Date().toLocaleDateString()}</td>
      <td class="sticky-second-col">${maquina.placa}</td>
      <td colspan="6" style="text-align: center; font-style: italic; color: #666;">
        No se encontraron registros para esta máquina
      </td>
    `;
    tbody.appendChild(fila);
  } else {
    for (var i = 0; i < registros.length; i++) {
      var reg = registros[i];
      var fila = document.createElement('tr');
      fila.innerHTML = `
        <td class="sticky-first-col">${reg.fecha || '-'}</td>
        <td class="sticky-second-col">${reg.placa || maquina.placa}</td>
        <td>${reg.obra || '-'}</td>
        <td>${reg.actividad || '-'}</td>
        <td>${reg.horaInicio || '-'}</td>
        <td>${reg.horaFin || '-'}</td>
        <td>${reg.horaInicio && reg.horaFin ? calcularHorasTotales(reg.horaInicio, reg.horaFin) + ' hrs' : '-'}</td>
        <td>${reg.valorHr || '-'}</td>
        <td>${reg.galones || '-'}</td>
        <td>${reg.valorGalones || '-'}</td>
        <td>${reg.horometroTanqueo || '-'}</td>
        <td>${reg.gps || '-'}</td>
        <td>${reg.observaciones || '-'}</td>
        <td>${reg.reporte || '-'}</td>
        <td>${reg.operador || '-'}</td>
      `;
      tbody.appendChild(fila);
    }
  }
  
  overlay.style.display = 'block';
  
  setTimeout(function() {
    var table = document.getElementById('tablaHistorial');
    if (table) {
      var firstCols = table.querySelectorAll('.sticky-first-col');
      var secondCols = table.querySelectorAll('.sticky-second-col');
      
      for (var j = 0; j < firstCols.length; j++) {
        firstCols[j].style.position = 'sticky';
        firstCols[j].style.left = '0';
        firstCols[j].style.zIndex = '50';
        firstCols[j].style.background = 'white';
      }
      
      for (var k = 0; k < secondCols.length; k++) {
        secondCols[k].style.position = 'sticky';
        secondCols[k].style.left = '120px';
        secondCols[k].style.zIndex = '50';
        secondCols[k].style.background = 'white';
      }
      
      table.style.transform = 'translateZ(0)';
    }
  }, 100);
}

function cerrarHistorial() {
  var overlay = document.getElementById('historialOverlay');
  if (overlay) {
    overlay.style.display = 'none';
  }
}

function calcularHorasTotales(inicio, fin) {
  try {
    var h1 = parseInt(inicio.split(':')[0]);
    var m1 = parseInt(inicio.split(':')[1]);
    var h2 = parseInt(fin.split(':')[0]);
    var m2 = parseInt(fin.split(':')[1]);
    var totalHoras = (h2 + m2 / 60) - (h1 + m1 / 60);
    return totalHoras.toFixed(1);
  } catch (error) {
    console.error('Error al calcular horas:', error);
    return '0.0';
  }
}

// Funciones de debug
function verificarContenedor() {
  var container = document.getElementById('maquinas-container');
  if (container) {
    console.log('✅ Contenedor encontrado:', container);
    console.log('Contenido actual:', container.innerHTML);
  } else {
    console.error('❌ Contenedor #maquinas-container NO encontrado');
    var containers = Array.from(document.querySelectorAll('[id*="container"], [class*="container"]'));
    var containerInfo = containers.map(function(el) {
      return { id: el.id, class: el.className };
    });
    console.log('Contenedores disponibles:', containerInfo);
  }
}

function verificarEstilosBody() {
  console.log('=== DEBUG ESTILOS BODY ===');
  console.log('body.classList:', Array.from(document.body.classList));
  console.log('body.style.overflow:', document.body.style.overflow);
  console.log('body.style.paddingRight:', document.body.style.paddingRight);
  console.log('body.style.position:', document.body.style.position);
  console.log('Computed overflow:', window.getComputedStyle(document.body).overflow);
  console.log('Modal backdrops:', document.querySelectorAll('.modal-backdrop').length);
  console.log('========================');
}

function forzarLimpiezaCompleta() {
  console.log('Forzando limpieza completa...');
  limpiarEstilosModal();
  verificarEstilosBody();
}

function initGestionMaquinaria() {
  if (!guardarActivos) {
    localStorage.removeItem('maquinas_activas');
    console.log('⚠️ Se eliminaron tarjetas previas de localStorage (guardado desactivado)');
  }

  var container = document.getElementById('maquinas-container');
  if (container) container.innerHTML = '';
  
  paginaActual = 1;
  tarjetasPorPagina = 6;

  cargarMaquinasExistentes();
  inicializarDatosDePrueba();


  // Configuración del formulario
  var form = document.getElementById('formNuevaMaquina');
  if (form) {
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      var placa = (document.getElementById('placa') || {}).value;
      if (!placa) {
        alert("La placa es requerida");
        return;
      }

      var tipoSelect = document.getElementById('tipo');
      var tipo = tipoSelect.value;
      var tipoTexto = tipo === 'otro' 
        ? ((document.getElementById('nuevoTipo') || {}).value || 'Otro')
        : tipoSelect.options[tipoSelect.selectedIndex].text;

      var operadorSelect = document.getElementById('operador');
      
      var nuevaMaquina = {
        id: Date.now(),
        tipo: tipoTexto || '',
        placa: placa,
        estado: 'DISPONIBLE',
        fecha: new Date().toLocaleDateString('es-ES'),
        obra: 'Sin asignar',
        actividad: 'Ninguna',
        operador: operadorSelect.options[operadorSelect.selectedIndex].text || 'Sin asignar',
        operadorId: parseInt(operadorSelect.value) || null
      };

      if (crearTarjetaMaquina(nuevaMaquina)) {
        setTimeout(function() {
          cerrarModalSeguro();
          form.reset();
          limpiarEstilosModal();
        }, 50);
      }
    });
  }

  // Configuración del modal
  var modalElement = document.getElementById('modalNuevaMaquina');
  if (modalElement) {
    modalElement.addEventListener('hidden.bs.modal', limpiarEstilosModal);
    
    var closeButtons = modalElement.querySelectorAll('[data-bs-dismiss="modal"], .btn-close');
    for (var i = 0; i < closeButtons.length; i++) {
      closeButtons[i].addEventListener('click', function() {
        setTimeout(limpiarEstilosModal, 100);
      });
    }
  }

  // Eventos globales
  document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') cerrarHistorial();
  });

  document.addEventListener('click', function(event) {
    var overlay = document.getElementById('historialOverlay');
    var tableContainer = document.querySelector('.table-container');
    
    if (overlay.style.display === 'block' && event.target === overlay && !tableContainer.contains(event.target)) {
      cerrarHistorial();
    }
  });
}

// Inicialización cuando el DOM esté listo
document.addEventListener('DOMContentLoaded', function() {
  initGestionMaquinaria();
});
      </script>
    <script  type ="module" src="../js/formMaquina.js"></script>

    <script is:inline>
// Versión mejorada con manejo de errores
document.addEventListener('DOMContentLoaded', function() {
  try {
    initGestionMaquinaria();
    
    // Expone funciones para eventos HTML
    window.cerrarHistorial = cerrarHistorial;
    window.mostrarHistorial = mostrarHistorial;
    
  } catch (error) {
    console.error('Error al cargar módulo de gestión:', error);
    // Puedes mostrar un mensaje al usuario en producción
    var container = document.getElementById('maquinas-container');
    if (container) {
      container.innerHTML = '<div class="alert alert-danger">Error al cargar el módulo de gestión. Recarga la página.</div>';
    }
  }
});
</script>
    <Scripts path={path} />
  

     </body>
     <!--end::Body-->
  
</html>